---
export interface Taps {
	single?: string;
	double?: string;
	long?: string;
}

export interface Props {
	id: string;
	name: string;
	description: string;
	tags?: string[];
	taps?: Taps;
}

const { name, description, id, tags = [], taps } = Astro.props;
---

<div
	class="rounded overflow-hidden shadow-sm card flex flex-col justify-between"
>
	<div class="px-6 py-4">
		<div class="flex items-center">
			<img class="w-16 mr-2" src={`/icons/${id}.png`} />
			<div>
				<div class="text-white font-bold text-xl">{name}</div>
				<p class="text-white opacity-80 text-base">{description}</p>
			</div>
		</div>
	</div>
	<div class="px-6 pb-2">
		{
			tags.map((tag) => (
				<span class="inline-block border-2 border-orange-500 text-orange-400  rounded-full px-3 py-1 text-sm font-semibold mr-2">
					#{tag}
				</span>
			))
		}
		<div class="text-gray-200 text-center">
			{
				taps && (
					<>
						<div class="w-full h-0.5 my-2 mt-4 bg-white opacity-5" />
						{Object.entries(taps).map(([type, description]) => (
							<div class="flex text-left">
								<span class="text-white font-bold w-16">{type}</span>
								<span class="text-white opacity-80">{description}</span>
							</div>
						))}
					</>
				)
			}
		</div>
	</div>
	<div class="px-2 pb-2">
		<button class="w-full text-white px-3 py-1 text-sm mt-2"
			>View in action</button
		>
	</div>
</div>
<style>
	.card {
		background: rgba(0, 0, 0, 0.25);
	}
	.card img:first-of-type {
		border-color: #222;
	}
	button {
		background: rgba(255, 255, 255, 0.25);
		transition: all 0.2s ease-in-out;
	}
	button:hover {
		background-color: #e8a534;
		color: #212121;
	}
</style>
