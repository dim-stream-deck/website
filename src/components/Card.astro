---
export interface Taps {
  single?: string;
  double?: string;
  long?: string;
}

export interface Props {
  id: string;
  name: string;
  description: string;
  tags?: string[];
  taps?: Taps;
}

const { name, description, id, tags = [], taps = {} } = Astro.props;

const tapMapping = {
  single: 'single tap',
  double: 'double tap',
  long: 'long press',
};

const entries = Object.entries(taps) as [keyof Taps, string][];
---

<div
  class="rounded overflow-hidden shadow-sm card flex flex-col justify-between"
>
  <div class="px-6 py-4">
    <div class="flex items-center">
      <img class="w-16 mr-2" src={`/icons/${id}.png`} />
      <div>
        <div class="text-white font-bold text-xl">{name}</div>
        <p class="text-white opacity-80 text-base">{description}</p>
      </div>
    </div>
    <div class="text-gray-200 text-center my-2">
      {
        entries.length > 0 && (
          <>
            <div class="table w-full h-0.5 mb-4 mt-4 bg-white opacity-5" />
            {entries.map(([type, description]) => (
              <div class="table-row text-left mb-1">
                <span class="table-cell text-white font-bold">{tapMapping[type]}</span>
                <span class="table-cell text-white opacity-80 flex-1 pl-3">{description}</span>
              </div>
            ))}
            <div class="w-full h-0.5 mb-4 mt-4 bg-white opacity-5" />
          </>
        )
      }
    </div>
  </div>
  <div class="px-6 pb-2">
    <div>
      {
        tags.map((tag) => (
          <span class="inline-block border-2 border-orange-500 text-orange-400 rounded-full px-3 py-1 text-sm font-semibold mr-2 mb-2">
            #{tag}
          </span>
        ))
      }
    </div>
  </div>
</div>
<style>
  .card {
    background: rgba(0, 0, 0, 0.25);
  }
  .card img:first-of-type {
    border-color: #222;
  }
</style>
